#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'stepmom'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/stepmom` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/stepmom now"
  exit 64
end

include GLI::App

config_file File.join(ENV['HOME'], '.stepmom.rc.yaml')

program_desc 'Helps you to find duplicates and group different steps in a single one'

version Stepmom::VERSION

@fileSteps = []
@selectedPath = File.expand_path("~")

subcommand_option_handling :normal
arguments :strict

desc 'Show file information'
switch [:i,:info]

desc 'Path to the steps'
default_value './steps'
arg_name 'Path'
flag [:p,:path]

desc 'List all steps in the selected files'
long_desc "
This command will list all the steps contained in the files specified by path option. 
If no option is passed, the app will list the steps contained in current folder. 
If no file pattern is set, all files with 'rb' extension will be included in the list.
"
arg_name 'file_pattern'
command :list do |c|
  c.desc 'Show file name'
  c.switch :f
  
  c.desc 'Show Keyword'
  c.switch :k

  c.desc 'Sort list. Options are ASC and DESC'
  c.default_value 'No sort'
  c.arg_name 'sorting'
  c.flag [:s, :sort]
  c.action do |global_options,options,args|

    isFolder = File.directory?(@selectedPath)

    exit(1) unless @fileSteps.count > 0
    
    if options[:sort] != "No sort"
      @fileSteps = @fileSteps.sort do |x, y|
        if options[:sort].upcase == "ASC"
          x.definition <=> y.definition
        elsif options[:sort].upcase == "DESC"
          y.definition <=> x.definition
        end
      end
    end

    formatFlags = []
    if options[:f]
      if isFolder
        formatFlags.push(:showFile)
      else
        fileInfo = Stepmom::Parser::StepsFile.getInfo(@selectedPath, @fileSteps)
        puts Stepmom::Parser::StepsFile.format(fileInfo)
      end
    end
    
    if options[:k]
      formatFlags.push(:showKeyword)
    end
    
    @fileSteps.each do |step|
      formattedStep = step.format(formatFlags) 
      $stdout.puts formattedStep unless formattedStep.length == 0
    end
    
  end
end

desc 'Look for a specific step definition in the selected files'
arg_name 'steps_search'
long_desc "
This command helps you find a step definition that matches a step description.
If -r flag is set will execute regular expressions in the step definition, otherwise they will be threated like a regular step.
"
command :search do |c|
  c.desc 'Use regular expressions'
  c.default_value ''
  c.arg_name 'expression'
  c.flag [:r, :regex]
  
  c.desc 'Step definition to search'
  c.default_value ''
  c.arg_name 'definition'
  c.flag [:d, :definition]

  c.desc 'Maximum distance'
  c.default_value ''
  c.arg_name 'maxdistance'
  c.flag [:m, :max]
  
  c.action do |global_options,options,args|
    if options[:d] != ''
      checkStep = Stepmom::Parser::Step.new(options[:d])
    elsif options[:r] != ''
      checkStep = /#{Regexp.new(options[:r].strip.downcase)}/i
    else
      raise GLI::CustomExit.new("Please select one of the valid options",-6)
    end
    
    raise GLI::CustomExit.new("Invalid parameters values",-7) unless !checkStep.nil?

    results = []

    @fileSteps.each do |step|      
      if checkStep.instance_of? Regexp
        distance = checkStep.match(step.text.downcase) ? -1 : -2
      else
        distance = checkStep.distance(step)
      end

      formattedStep = step.format([:showFile]) 
      
      results.push([distance, formattedStep])
    end
    
    raise GLI::CustomExit.new("Results is empty",-8) unless !results.nil?
    raise GLI::CustomExit.new("Results is empty",-8) unless results.count > 0
    
    results = results.sort do |x, y|
      x[0] <=> y[0]
    end
    
    printed = false
    
    results.each do |result|
      if options[:m] != '' 
        if result[0] > options[:m].to_i
          next
        end
      end
      if result[0] >= 0
        distance = if result[0] < 4 
          Rainbow("#{result[0]}").color(:red)
        elsif result[0] < 8
          Rainbow("#{result[0]}").color(:orange)
        else
          Rainbow("#{result[0]}").color(:green)
        end
        $stdout.puts "#{distance}: \t" + result[1] unless result[1].length == 0
        printed = true
      else
        if result[0] == -1
          $stdout.puts result[1] unless result[1].length == 0
          printed = true
        end
      end
    end
    
    raise GLI::CustomExit.new("Results is empty",-8) unless printed
    
  end
end

desc 'Test which steps would match a step description in the selected files'
arg_name 'step_test'
long_desc "
This command helps you to test in which step definitions a specific step would be executed in the selected file or folder
"
command :test do |c|
  
  c.desc 'Step definition to test'
  c.default_value ''
  c.arg_name 'definition'
  c.flag [:d, :definition]
  
  c.action do |global_options,options,args|

    raise GLI::CustomExit.new("Invalid number of arguments",-7) unless args.count > 0
    beginsWithKeyword = false
    checkText = ""
    Stepmom::Parser::Step::KEYWORD_LIST.each do |regex, keyword| 
      if regex.match(args[0])
        checkText = args[0].sub(keyword.to_s, '').strip
        beginsWithKeyword = true
        break
      end
    end
    raise GLI::CustomExit.new("Invalid step definition",-7) unless beginsWithKeyword
    
    results = []

    @fileSteps.each do |step|      
      if step.match(checkText)
        formattedStep = step.format([:showFile]) 
        results.push(formattedStep)
      end
    end
    results.each do |result|
      $stdout.puts result
    end
  end
end

desc 'Performs a check to compare all steps against all steps to find duplicates or possible substitutes'
arg_name 'check'
command :check do |c|
  c.action do |global_options,options,args|
    
    results = []
    @fileSteps.each do |step|
      @fileSteps.each do |check|
        if step == check
          next
        end
        if step.distance(check) < 5
          if !results.include? [check, step]
            $stdout.puts step.format([:showFile]) 
            $stdout.puts check.format([:showFile]) 
            $stdout.puts "\n"
            results.push([step, check])
          end
        end
      end
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  raise GLI::CustomExit.new("Can't find #{global[:path]}",-5) unless File.exists?(File.expand_path(global[:path]))

  @selectedPath = File.expand_path(global[:path])
  isFolder = File.directory?(@selectedPath)

  if isFolder
    filesPattern = File.expand_path(File.join(@selectedPath, "*_steps.rb"))
    Dir.glob(filesPattern) do |stepsFile|
      newFileSteps = Stepmom::Parser::StepsFile.getSteps(stepsFile)
      @fileSteps.push(*newFileSteps)
    end
  else
    @fileSteps = Stepmom::Parser::StepsFile.getSteps(@selectedPath)
  end

  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
